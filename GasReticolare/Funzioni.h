#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include<time.h>

typedef struct RandomParameters{
    unsigned long int n;
    unsigned long int seed;
}RP;

double INVRANDMAX=1/(RAND_MAX + 1.);

int Random(RP *RP, int min, int max);//To generate random int values
double randrange(double a, double b);//Better to use this one
void* array(int N, int size);
int** matrix(int L);
void immission_error();
void particles(int** reticolo, double ro, int L, int N);
void printmatrix(int** reticolo, int L);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Random(RP *RP, int min, int max){
    unsigned long int a=pow(5,5), c=pow(7,5), m=1944674407370955169; //a:constant multiplier, c:increment, m:modulus

	RP->n =(a*(RP->seed) + c) % m; //Generate random
    RP->seed = RP->n; //Update seed
    RP->n = min + (RP->n % (max - min + 1)); //Get number within range
    return RP->n;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
double randrange(double a, double b){
    //Generate a random double number in [a,b)
    return rand()*INVRANDMAX*(b-a)+a;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void* array(int N, int size){
    //Like calloc, but raises an error if fails to allocate
    void* ptr = calloc(N, size);
    if (ptr == NULL){
        fprintf(stderr, "Memory Error: allocation failed\n");
        exit(2);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
int** matrix(int L){
    //Allocate a matrix of int
    int **matrix = array(L, sizeof(int *));
    for (int i=0; i<L; i++){
        matrix[i] = array(L, sizeof(int));
    }
    return matrix;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void immission_error(){
    printf("\nError in the variable input, try again...\n");
    exit(1);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void particles(int** reticolo, double ro, int L, int N){
    int n=0;
    while(n<N){
        int x = randrange(0, L);
        int y = randrange(0, L);
        if(reticolo[x][y]==0){
            reticolo[x][y] = 1;
            n++;
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void printmatrix(int** reticolo, int L){
    for(int i=0; i<L; i++){
        for(int j=0; j<L; j++){
            printf("%i ", reticolo[i][j]);
        }
        printf("\n");
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void move(int** reticolo){

}